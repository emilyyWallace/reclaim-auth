{"ast":null,"code":"var _jsxFileName = \"/Users/emilywallace/Desktop/reclaim-auth-frontend/src/components/ReclaimDemo.js\";\nimport React, { useState } from \"react\";\nimport QRCode from \"react-qr-code\";\nfunction ReclaimDemo() {\n  const [requestUrl, setRequestUrl] = useState(\"\");\n  const [verificationIdentifier, setVerificationIdentifier] = useState(null);\n  const [error, setError] = useState(null);\n  const [isVerified, setIsVerified] = useState(false);\n\n  // âœ… Request Proof from Backend\n  const requestProof = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/request-reclaim-proof\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const result = await response.json();\n      if (result.success) {\n        setRequestUrl(result.proofRequest);\n      } else {\n        setError(result.message);\n      }\n    } catch (error) {\n      console.error(\"Error requesting proof:\", error);\n      setError(\"Failed to request proof.\");\n    }\n  };\n\n  // âœ… Send Proof to Backend for Verification\n  const verifyProof = async () => {\n    if (!verificationIdentifier) {\n      setError(\"No proof available for verification.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5000/verify-reclaim-proof\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          proof: verificationIdentifier\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        setIsVerified(true);\n      } else {\n        setError(\"Verification failed.\");\n      }\n    } catch (error) {\n      console.error(\"Verification error:\", error);\n      setError(\"Failed to verify proof.\");\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Zero-Knowledge Proof Demo\"), !isVerified ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: requestProof,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"Request Proof\"), requestUrl && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"20px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, \"Scan to Verify:\"), /*#__PURE__*/React.createElement(QRCode, {\n    value: requestUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }, \"Or click \", /*#__PURE__*/React.createElement(\"a\", {\n    href: requestUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 42\n    }\n  }, \"here\"), \" to verify.\")), verificationIdentifier && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"\\u2705 Proof Generated!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: verifyProof,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, \"Verify Proof\"))) : /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"\\uD83C\\uDF89 Access Granted! You are now verified. \\u2705\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }, error));\n}\nexport default ReclaimDemo;","map":{"version":3,"names":["React","useState","QRCode","ReclaimDemo","requestUrl","setRequestUrl","verificationIdentifier","setVerificationIdentifier","error","setError","isVerified","setIsVerified","requestProof","response","fetch","method","headers","result","json","success","proofRequest","message","console","verifyProof","body","JSON","stringify","proof","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","onClick","margin","value","href","color"],"sources":["/Users/emilywallace/Desktop/reclaim-auth-frontend/src/components/ReclaimDemo.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport QRCode from \"react-qr-code\";\n\nfunction ReclaimDemo() {\n    const [requestUrl, setRequestUrl] = useState(\"\");\n    const [verificationIdentifier, setVerificationIdentifier] = useState(null);\n    const [error, setError] = useState(null);\n    const [isVerified, setIsVerified] = useState(false);\n\n    // âœ… Request Proof from Backend\n    const requestProof = async () => {\n        try {\n            const response = await fetch(\"http://localhost:5000/request-reclaim-proof\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n            });\n\n            const result = await response.json();\n            if (result.success) {\n                setRequestUrl(result.proofRequest);\n            } else {\n                setError(result.message);\n            }\n        } catch (error) {\n            console.error(\"Error requesting proof:\", error);\n            setError(\"Failed to request proof.\");\n        }\n    };\n\n    // âœ… Send Proof to Backend for Verification\n    const verifyProof = async () => {\n        if (!verificationIdentifier) {\n            setError(\"No proof available for verification.\");\n            return;\n        }\n\n        try {\n            const response = await fetch(\"http://localhost:5000/verify-reclaim-proof\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ proof: verificationIdentifier }),\n            });\n\n            const result = await response.json();\n            if (result.success) {\n                setIsVerified(true);\n            } else {\n                setError(\"Verification failed.\");\n            }\n        } catch (error) {\n            console.error(\"Verification error:\", error);\n            setError(\"Failed to verify proof.\");\n        }\n    };\n\n    return (\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n            <h1>Zero-Knowledge Proof Demo</h1>\n\n            {!isVerified ? (\n                <>\n                    <button onClick={requestProof}>Request Proof</button>\n\n                    {requestUrl && (\n                        <div style={{ margin: \"20px 0\" }}>\n                            <h3>Scan to Verify:</h3>\n                            <QRCode value={requestUrl} />\n                            <p>\n                                Or click <a href={requestUrl}>here</a> to verify.\n                            </p>\n                        </div>\n                    )}\n\n                    {verificationIdentifier && (\n                        <div>\n                            <h2>âœ… Proof Generated!</h2>\n                            <button onClick={verifyProof}>Verify Proof</button>\n                        </div>\n                    )}\n                </>\n            ) : (\n                <h2>ðŸŽ‰ Access Granted! You are now verified. âœ…</h2>\n            )}\n\n            {error && <p style={{ color: \"red\" }}>{error}</p>}\n        </div>\n    );\n}\n\nexport default ReclaimDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}