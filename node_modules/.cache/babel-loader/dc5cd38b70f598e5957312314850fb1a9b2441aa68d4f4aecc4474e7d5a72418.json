{"ast":null,"code":"var _jsxFileName = \"/Users/emilywallace/Desktop/reclaim-auth-frontend/src/components/ReclaimDemo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReclaimDemo() {\n  _s();\n  const [requestUrl, setRequestUrl] = useState(\"\");\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isVerified, setIsVerified] = useState(false);\n  const [error, setError] = useState(null);\n  const getVerificationReq = async () => {\n    try {\n      setIsVerifying(true);\n      setError(null);\n\n      // Fetch the proof request config from backend\n      const response = await fetch(\"http://localhost:3000/reclaim/generate-config\");\n      const data = await response.json();\n      console.log(\"Backend response:\", data); // ✅ Debugging\n\n      if (!data.reclaimProofRequestConfig) {\n        throw new Error(\"Failed to generate verification request.\");\n      }\n\n      // Parse the returned JSON string\n      const reclaimProofRequestConfig = JSON.parse(data.reclaimProofRequestConfig);\n\n      // Extract the verification URL\n      const url = reclaimProofRequestConfig.requestUrl;\n      if (!url) {\n        throw new Error(\"No request URL in response\");\n      }\n      console.log(\"Request URL:\", url); // ✅ Debugging\n      setRequestUrl(url);\n    } catch (error) {\n      console.error(\"Error creating verification request:\", error);\n      setError(\"An error occurred while starting verification.\");\n      setIsVerifying(false);\n    }\n  };\n\n  // Poll the backend to check if the proof is verified\n  const pollForVerification = async () => {\n    let attempts = 0;\n    const maxAttempts = 10;\n    const interval = 3000; // Poll every 3 seconds\n\n    const checkProofStatus = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3000/check-verification\");\n        const data = await response.json();\n        if (data.verified) {\n          setIsVerified(true);\n          setIsVerifying(false);\n          return;\n        }\n        if (attempts < maxAttempts) {\n          attempts++;\n          setTimeout(checkProofStatus, interval);\n        } else {\n          setError(\"Verification timed out. Please try again.\");\n          setIsVerifying(false);\n        }\n      } catch (error) {\n        console.error(\"Error checking verification status:\", error);\n        setError(\"An error occurred while checking verification.\");\n        setIsVerifying(false);\n      }\n    };\n    checkProofStatus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Zero-Knowledge Proof Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getVerificationReq,\n      disabled: isVerifying,\n      children: isVerifying ? \"Verifying...\" : \"Get Verification Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), requestUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Scan to Verify:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n        value: requestUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Or click \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: requestUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this), \" to verify.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), isVerified && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        color: \"green\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u2705 Verification Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are now verified and can access the site.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginTop: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(ReclaimDemo, \"WfNFDC4GaM3PYNZ7LSNoWny6nqo=\");\n_c = ReclaimDemo;\nexport default ReclaimDemo;\nvar _c;\n$RefreshReg$(_c, \"ReclaimDemo\");","map":{"version":3,"names":["useState","useEffect","QRCode","React","jsxDEV","_jsxDEV","ReclaimDemo","_s","requestUrl","setRequestUrl","isVerifying","setIsVerifying","isVerified","setIsVerified","error","setError","getVerificationReq","response","fetch","data","json","console","log","reclaimProofRequestConfig","Error","JSON","parse","url","pollForVerification","attempts","maxAttempts","interval","checkProofStatus","verified","setTimeout","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","margin","value","href","target","rel","marginTop","color","_c","$RefreshReg$"],"sources":["/Users/emilywallace/Desktop/reclaim-auth-frontend/src/components/ReclaimDemo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport React from \"react\";\n\nfunction ReclaimDemo() {\n  const [requestUrl, setRequestUrl] = useState(\"\");\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [isVerified, setIsVerified] = useState(false);\n  const [error, setError] = useState(null);\n\n  const getVerificationReq = async () => {\n    try {\n      setIsVerifying(true);\n      setError(null);\n  \n      // Fetch the proof request config from backend\n      const response = await fetch(\"http://localhost:3000/reclaim/generate-config\");\n      const data = await response.json();\n  \n      console.log(\"Backend response:\", data); // ✅ Debugging\n  \n      if (!data.reclaimProofRequestConfig) {\n        throw new Error(\"Failed to generate verification request.\");\n      }\n  \n      // Parse the returned JSON string\n      const reclaimProofRequestConfig = JSON.parse(data.reclaimProofRequestConfig);\n  \n      // Extract the verification URL\n      const url = reclaimProofRequestConfig.requestUrl;\n      if (!url) {\n        throw new Error(\"No request URL in response\");\n      }\n  \n      console.log(\"Request URL:\", url); // ✅ Debugging\n      setRequestUrl(url);\n    } catch (error) {\n      console.error(\"Error creating verification request:\", error);\n      setError(\"An error occurred while starting verification.\");\n      setIsVerifying(false);\n    }\n  };\n\n  // Poll the backend to check if the proof is verified\n  const pollForVerification = async () => {\n    let attempts = 0;\n    const maxAttempts = 10;\n    const interval = 3000; // Poll every 3 seconds\n\n    const checkProofStatus = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3000/check-verification\");\n        const data = await response.json();\n\n        if (data.verified) {\n          setIsVerified(true);\n          setIsVerifying(false);\n          return;\n        }\n\n        if (attempts < maxAttempts) {\n          attempts++;\n          setTimeout(checkProofStatus, interval);\n        } else {\n          setError(\"Verification timed out. Please try again.\");\n          setIsVerifying(false);\n        }\n      } catch (error) {\n        console.error(\"Error checking verification status:\", error);\n        setError(\"An error occurred while checking verification.\");\n        setIsVerifying(false);\n      }\n    };\n\n    checkProofStatus();\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>Zero-Knowledge Proof Demo</h1>\n\n      <button onClick={getVerificationReq} disabled={isVerifying}>\n        {isVerifying ? \"Verifying...\" : \"Get Verification Request\"}\n      </button>\n\n      {/* Display QR code if verification link is available */}\n      {requestUrl && (\n        <div style={{ margin: \"20px 0\" }}>\n          <h3>Scan to Verify:</h3>\n          <QRCode value={requestUrl} />\n          <p>\n            Or click <a href={requestUrl} target=\"_blank\" rel=\"noopener noreferrer\">here</a> to verify.\n          </p>\n        </div>\n      )}\n\n      {/* Show verification success message */}\n      {isVerified && (\n        <div style={{ marginTop: \"20px\", color: \"green\" }}>\n          <h2>✅ Verification Successful!</h2>\n          <p>You are now verified and can access the site.</p>\n        </div>\n      )}\n\n      {/* Show error message if verification fails */}\n      {error && (\n        <div style={{ color: \"red\", marginTop: \"10px\" }}>\n          <p>{error}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ReclaimDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}